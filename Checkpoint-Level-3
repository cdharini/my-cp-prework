/* Kth Smallest Element in the Array
Find the kth smallest element in an unsorted array of non-negative integers.

Definition of kth smallest element

 kth smallest element is the minimum possible n such that there are at least k elements in the array <= n.
In other words, if the array A was sorted, then A[k - 1] ( k is 1 based, while the arrays are 0 based ) 
NOTE
You are not allowed to modify the array ( The array is read only ). */

public class Solution {
    // DO NOT MODIFY THE ARGUMENTS WITH "final" PREFIX. IT IS READ ONLY
    public int kthsmallest(final int[] A, int B) {
        PriorityQueue<Integer> kthPQ = new PriorityQueue<Integer>(Comparator.reverseOrder());
        for (int n : A) {
            kthPQ.offer(n);
            if (kthPQ.size() > B) {
                kthPQ.poll();
            }
        }
        return kthPQ.poll();
    }
}


/*
NUMRANGE
Given an array of non negative integers A, and a range (B, C), 
find the number of continuous subsequences in the array which have sum S in the range [B, C] or B <= S <= C

Continuous subsequence is defined as all the numbers A[i], A[i + 1], .... A[j]
where 0 <= i <= j < size(A)

Example :

A : [10, 5, 1, 0, 2]
(B, C) : (6, 8)
ans = 3 
*/

public class Solution {
    public int numRange(int[] A, int B, int C) {
        if (A == null || A.length == 0) return 0;
        int count = 0;
        
        for (int i = 0; i < A.length; i++) {
            int cursum = 0;
            for (int j = i; j < A.length; j++) {
                cursum += A[j];
                if (cursum >= B && cursum <= C) {
                    count++;
                }
                if (cursum > C) {
                    break;
                }
            }
        }
        return count;
    }
}

