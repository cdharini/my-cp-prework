/* NEXT GREATER
Given an array, find the next greater element G[i] for every element A[i] in the array. The Next greater Element for an element A[i] is the first greater element on the right side of A[i] in array. 
More formally,

G[i] for an element A[i] = an element A[j] such that 
    j is minimum possible AND 
    j > i AND
    A[j] > A[i]
Elements for which no greater element exist, consider next greater element as -1.

Example:

Input : A : [4, 5, 2, 10]
Output : [5, 10, 10, -1]
*/
public class Solution {
    public int[] nextGreater(int[] A) {
        int [] res = new int[A.length];
        for (int i = 0; i < A.length; i++) {
            res[i] = -1;
            for (int j = i + 1; j < A.length; j++) {
                if (A[j] > A[i]) {
                    res[i] = A[j];
                    break;
                }
            }
        }
        return res;
    }
}

/*
SUBTRACT
Given a singly linked list, modify the value of first half nodes such that :

1st node’s new value = the last node’s value - first node’s current value
2nd node’s new value = the second last node’s value - 2nd node’s current value,
and so on …
*/
public class Solution {
    public ListNode subtract(ListNode A) {
        if (A == null || A.next == null) return A;
        ListNode slow = A;
        ListNode fast = A;
        
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }
        if (fast != null) {
            slow = slow.next;
        }
        
        ListNode secondHalfRev = reverseListCopy(slow);
        
        ListNode cur = A;
        while (cur != null && secondHalfRev != null) {
            cur.val = secondHalfRev.val - cur.val;
            cur = cur.next;
            secondHalfRev = secondHalfRev.next;
        }
        return A;
    }
    
    public ListNode reverseListCopy(ListNode A) {
        ListNode ACopy = new ListNode(A.val);
        ListNode cur = A.next;
        ListNode ACopyCur = ACopy;
        while(cur != null) {
            ACopyCur.next = new ListNode(cur.val);
           cur = cur.next;
            ACopyCur = ACopyCur.next;
        }
        return reverseList(ACopy);
    }
    
    public ListNode reverseList(ListNode A) {
        if (A == null || A.next == null) return A;
        ListNode prev = null;
        ListNode cur = A;
        ListNode next;
        
        while(cur != null) {
            next = cur.next;
            cur.next = prev;
            prev = cur;
            cur = next;
        }
        return prev;
    }
}
